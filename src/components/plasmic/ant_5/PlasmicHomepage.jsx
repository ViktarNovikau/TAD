// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3f7to55QzZLdVuCvXTRtuj
// Component: 4klFuXNAJicq
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect"; // plasmic-import: OvH7ENd3m7ug/codeComponent
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: pTzGlMptTxd/codeComponent
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: pTzGlMptTxd/codeComponentHelper
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton"; // plasmic-import: bx9Xzvf5_eu/codeComponent
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_ant_5.module.css"; // plasmic-import: 3f7to55QzZLdVuCvXTRtuj/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: 4klFuXNAJicq/css

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "select3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textArea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "textArea2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      }
    ],

    [$props, $ctx]
  );

  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"cardBasic"}
            data-plasmic-override={overrides.cardBasic}
            className={classNames(projectcss.all, sty.cardBasic)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"cardHeadSmall"}
              data-plasmic-override={overrides.cardHeadSmall}
              hasGap={true}
              className={classNames(projectcss.all, sty.cardHeadSmall)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cZi7C
                )}
              >
                {"Review Results"}
              </div>
              <div
                data-plasmic-name={"formItemVertical"}
                data-plasmic-override={overrides.formItemVertical}
                className={classNames(projectcss.all, sty.formItemVertical)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"inputLabelVertical"}
                  data-plasmic-override={overrides.inputLabelVertical}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.inputLabelVertical)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__w9OBq
                    )}
                  >
                    {"*"}
                  </div>
                  <div
                    data-plasmic-name={"inputLabel"}
                    data-plasmic-override={overrides.inputLabel}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.inputLabel
                    )}
                  >
                    {"Final score"}
                  </div>
                </p.Stack>
                <AntdSelect
                  data-plasmic-name={"select3"}
                  data-plasmic-override={overrides.select3}
                  bordered={true}
                  className={classNames("__wab_instance", sty.select3)}
                  defaultOpen={false}
                  defaultStylesClassName={classNames(
                    projectcss.root_reset,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    projectcss.plasmic_tokens,
                    plasmic_antd_5_hostless_css.plasmic_tokens
                  )}
                  dropdownMatchSelectWidth={true}
                  mode={"single"}
                  onChange={p.generateStateOnChangeProp($state, [
                    "select3",
                    "value"
                  ])}
                  options={[
                    { value: "1", label: "Great Candidate" },
                    { value: "2", label: "Normal" }
                  ]}
                  placeholder={"Select"}
                  popupScopeClassName={sty["select3__popup"]}
                  size={"middle"}
                  useChildren={false}
                  value={p.generateStateValueProp($state, ["select3", "value"])}
                />

                {false ? (
                  <div
                    data-plasmic-name={"inputCaption"}
                    data-plasmic-override={overrides.inputCaption}
                    className={classNames(projectcss.all, sty.inputCaption)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___03BR
                      )}
                    >
                      {"This is a caption under a text input."}
                    </div>
                  </div>
                ) : null}
              </div>
              <div
                data-plasmic-name={"formItemVertical3"}
                data-plasmic-override={overrides.formItemVertical3}
                className={classNames(projectcss.all, sty.formItemVertical3)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"inputLabelVertical3"}
                  data-plasmic-override={overrides.inputLabelVertical3}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.inputLabelVertical3
                  )}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sdXdt
                    )}
                  >
                    {"*"}
                  </div>
                  <div
                    data-plasmic-name={"inputLabel3"}
                    data-plasmic-override={overrides.inputLabel3}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.inputLabel3
                    )}
                  >
                    {"Strong sides"}
                  </div>
                </p.Stack>
                {false ? (
                  <div
                    data-plasmic-name={"inputCaption3"}
                    data-plasmic-override={overrides.inputCaption3}
                    className={classNames(projectcss.all, sty.inputCaption3)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__arZYa
                      )}
                    >
                      {"This is a caption under a text input."}
                    </div>
                  </div>
                ) : null}
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.textArea),
                    onChange: p.generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["textArea", "value"],
                      AntdTextArea_Helpers
                    ),

                    placholder:
                      "Mention any outstanding applicant's skills and capabilities",
                    value: p.generateStateValueProp($state, [
                      "textArea",
                      "value"
                    ])
                  };
                  p.initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "textArea.value"
                      }
                    ],

                    [],
                    AntdTextArea_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdTextArea
                      data-plasmic-name={"textArea"}
                      data-plasmic-override={overrides.textArea}
                      {...child$Props}
                    />
                  );
                })()}
              </div>
              <div
                data-plasmic-name={"formItemVertical4"}
                data-plasmic-override={overrides.formItemVertical4}
                className={classNames(projectcss.all, sty.formItemVertical4)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"inputLabelVertical4"}
                  data-plasmic-override={overrides.inputLabelVertical4}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.inputLabelVertical4
                  )}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___6Fm0D
                    )}
                  >
                    {"*"}
                  </div>
                  <div
                    data-plasmic-name={"inputLabel4"}
                    data-plasmic-override={overrides.inputLabel4}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.inputLabel4
                    )}
                  >
                    {"Weak sides"}
                  </div>
                </p.Stack>
                {false ? (
                  <div
                    data-plasmic-name={"inputCaption4"}
                    data-plasmic-override={overrides.inputCaption4}
                    className={classNames(projectcss.all, sty.inputCaption4)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__oifAy
                      )}
                    >
                      {"This is a caption under a text input."}
                    </div>
                  </div>
                ) : null}
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.textArea2),
                    onChange: async (...eventArgs) => {
                      p.generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["textArea2", "value"],
                        AntdTextArea_Helpers
                      ).apply(null, eventArgs);
                      (async event => {
                        const $steps = {};
                      })?.apply(null, eventArgs);
                    },
                    placholder:
                      "Mention any outstanding applicant's skills and capabilities",
                    value: p.generateStateValueProp($state, [
                      "textArea2",
                      "value"
                    ])
                  };
                  p.initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "textArea2.value"
                      }
                    ],

                    [],
                    AntdTextArea_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdTextArea
                      data-plasmic-name={"textArea2"}
                      data-plasmic-override={overrides.textArea2}
                      {...child$Props}
                    />
                  );
                })()}
              </div>
              <AntdButton
                data-plasmic-name={"cta"}
                data-plasmic-override={overrides.cta}
                className={classNames("__wab_instance", sty.cta)}
                disabled={true}
                size={"medium"}
                type={"primary"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pFcu
                  )}
                >
                  {"Proceed"}
                </div>
              </AntdButton>
            </p.Stack>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "cardBasic",
    "cardHeadSmall",
    "formItemVertical",
    "inputLabelVertical",
    "inputLabel",
    "select3",
    "inputCaption",
    "formItemVertical3",
    "inputLabelVertical3",
    "inputLabel3",
    "inputCaption3",
    "textArea",
    "formItemVertical4",
    "inputLabelVertical4",
    "inputLabel4",
    "inputCaption4",
    "textArea2",
    "cta"
  ],

  cardBasic: [
    "cardBasic",
    "cardHeadSmall",
    "formItemVertical",
    "inputLabelVertical",
    "inputLabel",
    "select3",
    "inputCaption",
    "formItemVertical3",
    "inputLabelVertical3",
    "inputLabel3",
    "inputCaption3",
    "textArea",
    "formItemVertical4",
    "inputLabelVertical4",
    "inputLabel4",
    "inputCaption4",
    "textArea2",
    "cta"
  ],

  cardHeadSmall: [
    "cardHeadSmall",
    "formItemVertical",
    "inputLabelVertical",
    "inputLabel",
    "select3",
    "inputCaption",
    "formItemVertical3",
    "inputLabelVertical3",
    "inputLabel3",
    "inputCaption3",
    "textArea",
    "formItemVertical4",
    "inputLabelVertical4",
    "inputLabel4",
    "inputCaption4",
    "textArea2",
    "cta"
  ],

  formItemVertical: [
    "formItemVertical",
    "inputLabelVertical",
    "inputLabel",
    "select3",
    "inputCaption"
  ],

  inputLabelVertical: ["inputLabelVertical", "inputLabel"],
  inputLabel: ["inputLabel"],
  select3: ["select3"],
  inputCaption: ["inputCaption"],
  formItemVertical3: [
    "formItemVertical3",
    "inputLabelVertical3",
    "inputLabel3",
    "inputCaption3",
    "textArea"
  ],

  inputLabelVertical3: ["inputLabelVertical3", "inputLabel3"],
  inputLabel3: ["inputLabel3"],
  inputCaption3: ["inputCaption3"],
  textArea: ["textArea"],
  formItemVertical4: [
    "formItemVertical4",
    "inputLabelVertical4",
    "inputLabel4",
    "inputCaption4",
    "textArea2"
  ],

  inputLabelVertical4: ["inputLabelVertical4", "inputLabel4"],
  inputLabel4: ["inputLabel4"],
  inputCaption4: ["inputCaption4"],
  textArea2: ["textArea2"],
  cta: ["cta"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    cardBasic: makeNodeComponent("cardBasic"),
    cardHeadSmall: makeNodeComponent("cardHeadSmall"),
    formItemVertical: makeNodeComponent("formItemVertical"),
    inputLabelVertical: makeNodeComponent("inputLabelVertical"),
    inputLabel: makeNodeComponent("inputLabel"),
    select3: makeNodeComponent("select3"),
    inputCaption: makeNodeComponent("inputCaption"),
    formItemVertical3: makeNodeComponent("formItemVertical3"),
    inputLabelVertical3: makeNodeComponent("inputLabelVertical3"),
    inputLabel3: makeNodeComponent("inputLabel3"),
    inputCaption3: makeNodeComponent("inputCaption3"),
    textArea: makeNodeComponent("textArea"),
    formItemVertical4: makeNodeComponent("formItemVertical4"),
    inputLabelVertical4: makeNodeComponent("inputLabelVertical4"),
    inputLabel4: makeNodeComponent("inputLabel4"),
    inputCaption4: makeNodeComponent("inputCaption4"),
    textArea2: makeNodeComponent("textArea2"),
    cta: makeNodeComponent("cta"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
